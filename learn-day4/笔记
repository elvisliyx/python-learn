
装饰器：
    定义：本质是函数，（装饰其他函数）就是为其他函数添加附加功能。
    原则：1、不能修改被装饰的函数的源代码。2、不能修改被装饰的函数的调用方式。

实现装饰器只是储备：
    1、函数即“变量”
    2、高阶函数
        a:把一个函数名当做实参传给另外一个函数(在不修改呗装饰函数源代码的情况下为其添加功能)
        b:返回值中包含函数名(不修改函数的调用方式)
    3、嵌套函数

高阶函数+嵌套函数=》装饰器


列表生成式
    [ i*2 for i in range(10) ]
    a = []
    for i in range(10):
        a.append(i*2)
    a


生成器
    只有在调用时才会生成相应的数据，只记录当前位置，只有一个__next__()方法。next()
    ( i*i for i in range(10) )

  generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。
  比如，著名的斐波那契数列(Fibonacci)，除第一个和第二个数外，任意一个数都可以由前两个数相加得到：
  1，1,2,3,5,8,13,21,34......
  斐波那契数列用列表生成式写不出来，但是用函数把它打印出来却很容易。
  def fib(max):
    n,a,b = 0,0,1
    while n < max:
        #print(b)
        yield b
        a,b = b,a+b
        n = n + 1
    return 'done'
  f = fib(100)
  print(f.__next__())
  print(f.__next__())
  print(f.__next__())
  for i in f:
    print(i)

  g = fib(6)
  while True:
    try:
        x = next(g)
        print('g:',x)
    except StopIteration as e:
        print('Generator return value:',e.value)
        break

  注意，赋值语句：
  a,b = b,a+b
  相当于：
  t = (b,a+b) t是一个tuple(元祖)
  a = t[0]
  b = t[1]


迭代器
    可以直接作用于for循环的数据类型有一下几种：
    一类是集合数据类型，如list、tuple、dict、set、str等：
    一类是generator，包括生成器和带yield的generator function。
    这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。
    可以使用isinstance（）判断一个对象是否是Iterable对象：
    from collections import Iterable
    isinstance([],Iterable)
    True
    isinstance({},Iterable)
    True
    isinstance('abc',Iterable)
    True
    isinstance((x for x in range(10)),Iterable)
    True
    isinstance(100,Iterable)
    False


    生成器不但可以作用于for循环，还可以被next（）函数不断调用并返回下一个值，直到最后跑出StopIteration错误表示无法继续返回下一个值了。
    *可以被next()函数调用并不断返回下一个值得对象称为迭代器：Iterator。
    from collections import Iterator
    isinstance([],Iterator)
    False
    isinstance({},Iterator)
    False
    isinstance('abc',Iterator)
    False
    isinstance((x for x in range(10)),Iterator)
    True


    生成器都是Iterator对象，但是list、dict、str虽然是Iterable，却不是Iterator。
    把list、dict、str等Iterable变成Iterator可以使用iter()函数：
    isinstance(iter([]),Iterator)
    True
    isinstance(iter('abc'),Iterator)
    True


    因为Python的Iterator对象表示的事一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。
    可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是有惰性的，只有需要返回下一个数据时它才会计算。
    Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。

    小结：
    凡是可作用于for循环的对象都是Iterable类型；
    凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；
    集合数据类型如list、dict、str等式Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。

    Python的for循环本质上就是通过不断调用next()函数实现的，例如：
    for x in range(10):
        pass

    实际上完全等价于：
    #首先获取Iterator对象：
    it = iter(range(10))
    #循环：
    while True:
        try:
            x = next(it) #获得下一个值：
        except StopIteration:
            break  #遇到StopIteration就退出循环




